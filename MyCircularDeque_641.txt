import java.util.LinkedList;

class MyCircularDeque {

    private LinkedList mList;
    private int mSize;
    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
    	mSize = k;
        mList = new LinkedList<Integer>();
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
    	if (isFull()) {
    		mList.addFirst(value);
    		return true;
    	} else {
    		 return false;
    	}
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
    	if (isFull()) {
    		mList.addLast(value);
    		return true;
    	} else {
    		 return false;
    	}
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
    	if (isEmpty()) {
    		return false;
    	} else {
    		mList.removeFirst();
    		return true;
    	}
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
    	if (isEmpty()) {
    		return false;
    	} else {
    		mList.removeLast();
    		return true;
    	}
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
    	if (isEmpty()) {
    		return -1;
    	} else {
    		return (int) mList.getFirst();
    	}
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
        return isEmpty() ? -1 :  (int) mList.getLast();
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
        return mList.size() == 0;
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
        return mList.size() == mSize;
    }
}

